#!/usr/bin/env bash

# Usage:
#  ./build_dockers.bsh - Build all the compiling docker images
#  ./build_dockers.bsh lfs_centos_5 lfs_centos_7 - Build only CentOS 5 & 7 image
#
# Special Environment Variables
#  DOCKER_LFS_BUILD_VERSION - tag or sha to build envirnment off of. Important
#                             in CentOS
set -eu

CUR_DIR=$(dirname "${BASH_SOURCE[0]}")

: ${GOLANG_VERSION:=1.12.4}
export GOLANG_VERSION

#If you are not in docker group and you have sudo, default value is sudo
: ${SUDO=`if ( [ ! -w /var/run/docker.sock ] && id -nG | grep -qwv docker && [ "${DOCKER_HOST:+dh}" != "dh" ] ) && which sudo > /dev/null 2>&1; then echo sudo; fi`}

export DOCKER_LFS_BUILD_VERSION=${DOCKER_LFS_BUILD_VERSION:-release-2.4}

if [[ $# == 0 ]]; then
  IMAGE_NAMES=($(ls -d ${CUR_DIR}/*.Dockerfile))
else
  IMAGE_NAMES=("${@}")
fi

#This will take a long time the first time
for IMAGE_NAME in "${IMAGE_NAMES[@]}"; do
  # IMAGE_NAME is "./debian_7.Dockerfile"
  # strip basename
  # strip leading "./"
  # strip trailing ".Dockerfile"
  IMAGE_DIR=$(dirname ${IMAGE_NAME})
  NAME="$(printf $IMAGE_NAME | sed 's/\.\///' | sed 's/\.Dockerfile$//')"

  pushd $IMAGE_DIR
    echo Docker building ${NAME}
    if [[ $IMAGE_NAME == centos* ]]; then
      $SUDO docker build --build-arg=GOLANG_VERSION=${GOLANG_VERSION} --build-arg=DOCKER_LFS_BUILD_VERSION=${DOCKER_LFS_BUILD_VERSION} -t gitlfs/build-dockers:${NAME} -f "$NAME.Dockerfile" .
    else
      $SUDO docker build --build-arg=GOLANG_VERSION=${GOLANG_VERSION} -t gitlfs/build-dockers:${NAME} -f "$NAME.Dockerfile" .
    fi
  popd
done
